newtype Ls(x{}, Nil | Ls(x{})) = (r, res)

let base = () => {return {}}
let insert = (arr: Nil | Array(m{}), a: n{}) => concat(arr, Array(a))

let res = Array(1)
res = insert(insert(res, true), "mooo")
res = concat(res, Array({p: true}))

let sres = insert(res, {b: "Hello"})
sres = concat(sres, Array({a: 3}))

res = concat(res, Array(sres))
println(res)

len(xs: Nil | Ls(n{})) => Int {
    if not (not (xs is Nil)) { return 0 }
    return len(xs.res)+1
}

let ins = (a: a{}, ls: Nil | Ls(b{})) => Ls(a, ls)

let xs = Ls("d", ins("ddjn", Ls("ddjn", {})))
xs = ins("ok", xs)
xs = ins("bad", xs)
println(len(xs))

if res notis Nil {
    let x = index(res, 3)
    if x is String {
        println(x + "hoo")
    } else if x is Int {
        println(x+1)
    } else {
        println(x)
    }
}