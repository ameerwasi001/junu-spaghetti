type Pet = {species: String, name: String, color: String}
type Moo = {name: String, age: Int, male: Bool, pet: Pet}
type Person = {name: String, age: Int, male: Bool, pet: Pet, parent: Nil | Person}
type Date = {month: Int, weekday: Int, year: Int}
newtype Tup(a{}, b{}) = (a, b)

println("\n\n\nProgram begins: \n")

let s = Tup(1, true)
let x = s.a

let b = s.b

x = 4
let i = 0

let fl = (a: Int, b: Bool) => {
    return (n: Bool) => {
        return (h: Pet) => {
            return () => {
                return h.name
            }
        }
    }
}

let go = (a: Int, b: Int) => {
    let f = (n: Int) => {
        let zoo = n * 3
        return n
    }
    let ans = a+b
    return f(ans)
}

mutu1(Int, Int) => Int
mutu2(Int, Bool) => Int

mutu1 = (a: Int, b: Int) => Int {
    return mutu2(b, true)
}

mutu2 = (n: Int, a: Bool) => Int {
    if b { return 1 }
    return mutu1(n, n+1)
}

let apply = (f: (a{}) -> b{}, x: a{}) => b{} {
    return f(x)
}

let given = fl(1, true)(true)({name: "Hello's kitty", color: "Black", species: "Cat"})()
let application = apply((a: Int) => { return a == 1 }, 1)

let changeCatName = (person: Person, name: String) => {
    let f = () => {
        if person.age < 5 {
            let catties = 1
            catties = catties + 1
            person.pet.name = person.name
            return person.pet.name
        } else if person.age < 100 {
            person.pet.name = name
            return person.pet.name
        } else {
            return "Dead man's cat"
        }
    }
    return f()
}

let modifyAge = (person: Person, age: Int) => {
    person.age = if age < 0 then 0 else age
    return age
}

let st = {name: "Ameer", age: 10, male: true, pet: {species: "Cat", name: "Tom", color: "White"}, parent: {}}
st.parent = duplicate(st)

let nm1 = changeCatName(st, "Molly")
let ag1 = modifyAge(st, st.age + 1)

write("st is: ")
println(st)

open setName(t{}, String, a{.pet: b{.name: t{}}}) => b{.name: t{}} for a{.pet: b{.name: t{}}}

impl setName(s: String, area: String, person: Person) => {
    person.name = s
    return person.pet
} for Person

impl setName(s: String, area: String, cat: {pet: Person}) => {
    cat.pet.name = s
    return cat.pet
} for {pet: Person}

impl setName(i: Int, area: String, intkeeper: {pet: {name: Int}}) => {
    intkeeper.pet.name = i
    return intkeeper.pet
} for {pet: {name: Int}}

let sn = setName("Junu", "Collatz", {pet: st})

write("sn is: ")
println(sn)

open fi(a{}) => (a{}) -> a{} for a{}

impl fi(i: Int) => {
    return (i: Int) => {return i}
} for Int

let fires = fi(1)

let fn = (c: st{.n: t{}, .a: Int}, a: t{}) => {
    c.n = a
    return c.n
}

let swapG = (a: x{.a: ax{}, .b: bx{}}, f: (bx{}, ax{}) -> Tup(bx{}, ax{})) => {
    return f(a.b, a.a)
}

let swapML = (ml: x{.a: ax{}, .b: bx{}}) => {
    return Tup(ml.b, ml.a)
}

fn({n: {month: 2, weekday: 5, year: 1999}, a: 1}, {month: 3, weekday: 5, year: 1999})
let btool = fn({n: false, a: 4, x: "Hello"}, true)

let mlres = swapML(Tup(st, Tup(1, st.pet)))

write("mlres is: ")
println(mlres)

let identity = (a: x{}) => { return a }

open fst(s{.a: a{}, .b: b{}}) => a{} for s{.a: a{}, .b: b{}}

impl fst(s: Tup(a{}, b{})) => {
    return identity(s.a)
} for Tup(a{}, b{})

let snd = (s: Tup(l{}, r{})) => fst(swapML(s))
let tres = snd(s)

write("tres is: ")
println(tres)

let idresf = (s: Tup(q{}, r{})) => identity(apply(identity, swapG(s, (a: oi{}, b: fi{}) => Tup(a, b))))
let idres = idresf(s)

write("idres is: ")
println(idres)

let ftr = (a: String, b: {name: String, species: String} | Pet | Person) => String {
    if b notis Person {
        return b.species + " " + b.name
    } else {
        return b.pet.species + " " + b.name
    }
    return b.name + a
}

let flr = (x: Pet | Person) => {
    if x is Person {
        return {x: 1}
    }
    return ftr(x.species, x)
}

if x is Int {
    b = if x < 10 then ftr("Hello ", st) else false
}

let basicPerson = (name: String, age: Int, male: Bool) => {
    return {name: name, age: age, male: male, pet: {species: "Cat", name: "Tom", color: "White"}, parent: {}}
}